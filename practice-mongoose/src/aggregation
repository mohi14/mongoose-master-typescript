*What is aggregation?
-> Aggregation is a way of processing a large number of documents in a collection by means of passing them through different stages. The stages make up what is known as a pipeline. The stages in a pipeline can filter, sort, group, reshape and modify documents that pass through the pipeline.

*Syntax
->db.collection.aggregate(
    [
        -stage 1
        {},--> pipeline
        -stage 2
        {},-->pipeline
        -stage 3
        {}-->pipeline
    ]
)

*Example
->db.cousins.aggregate([
 //Filter out cousins who have an Exam
 { $match:{ hasExam: {$ne: true} } },

 //Filter out cousins who have a budget less than or equal to 500
 { $match: { budget: { $gt: 500} } },

 //Filter out cousins who are sick
 { $match { isSick: { $ne: true} } },

 //Calculate the total budget of the remaining cousins
 { $group: { _id: null, total_budget: { $sum: "$budget"} } },

 //Sort the remaining cousins by age in descending order 
 { $sort: { age: -1} },

 //Limit the output to the top 2 cousins
 { $limit: 2},
])

*$match aggregate operator, eta "find" er moto kaj kore

db.practice.aggregate([
    // stage Match
    {$match: { gender : "Male", age: 21}}
    ])

    db.practice.aggregate([
    // stage Match
    {$match: { gender : "Male", age: {$gt:21}}},
    {$project: {gender:1, age: 1}}
    ])

*$addFields stage , eta new field add kore database e

db.practice.aggregate([
    // add field stage
    {$addFields: {salary: 0}},
    ]) -- it will not add field permanently

    db.practice.aggregate([
    // add field stage
    {$addFields: {
        salary: {$toInt: {
        $floor: {
            $multiply: [{$rand:{}},100 ]
        }
    }}}},
    ]) -- it will not add field permanently

db.practice.aggregate([
    // add field stage
    {$addFields: {
        salary: {$toInt: {
        $floor: {
            $multiply: [{$rand:{}},100 ]
        }
    }}}},
    {$out: "salarywithpractice"}
    ]) --it will create new collection with permanent salary field

    db.practice.aggregate([
    // add field stage
    {$addFields: {
        salary: {$toInt: {
        $floor: {
            $multiply: [{$rand:{}},100 ]
        }
    }}}},
    {$merge: "practice"}
    ]) --it will add new filed in the existing collection


    *$group, eta unique vabe document gola combain kore

db.practice.aggregate([
    // group stage
    {
        $group: { _id: "$gender"}
    }
    ])
    
    // reference ---> 
    // use case 1. operator $push $sum 2. Reference to a field

db.practice.aggregate([
    // group stage
    {_id: {
        gender:"$gender"
        }
        }}
    ])


    db.practice.aggregate([
    // group stage
    {
        $group: { _id: {
            gender:"$gender",
            age: "$age"
        }}
    }
    ])
    
    
*more $group, accumulate, $sort, $limit

db.practice.aggregate([
    // group stage
    {
        $group: {
            _id:  "$gender",count: { $sum: 1 } --> ata gender er bittota er bitte te group korbe and $sum diye count korbe aki rokom koto gola ase
        }
    }
])

    db.practice.aggregate([
    // group stage
    {
        $group: { _id: {
            gender:"$gender",
            
    },
    persons: {$sum:1} --> accumulator, it will count how many same person it found
        }
    },
    
    // project stage
    {$project: {
        _id:0,
        salary: "$_id",
        // persons:1
    }},
    
    // sort stage
    {
        $sort:{_id:1}
    }
    ])


db.practice.aggregate([
    // group stage
    {
        $group: { _id:null,count: { $sum: "$salary"}} --> it will sum all the salary field value
    },
    
    ])


db.practice.aggregate([
    // group stage
    {
        $group: {
            _id: null,
            count: { $sum: "$salary" },
            maxSalary: { $max: "$salary" },
            minSalary: {$min: "$salary"},
            avgSalary: {$avg: "$salary"}
        }
    }
])

db.practice.aggregate([
    // group stage
    {
        $group: {
            _id: null,
            count: { $sum: "$salary" },
            maxSalary: { $max: "$salary" },
            minSalary: {$min: "$salary"},
            avgSalary: {$avg: "$salary"}
        }
    },
    {
        $project: {
            count:1,
            maxSalary: 1,
            minSalary:1,
            avgSalary:1,
            salaryRange: {$subtract: ["$maxSalary","$minSalary"]}
        }
       
    }
])



db.practice.aggregate([
    // group stage
    {
        $group: {
            _id: "$age",
            persons: {$sum: 1},
            count: { $sum: "$salary" },
            maxSalary: { $max: "$salary" }
        }
    }
])


* $unwind, --> ata akta document er array theke array er element gola diye alada noton document toiri kore, joto gola array element thakbe toto gola document banabe

db.practice.aggregate([
    // unwind stage
    {
        $unwind: "$education" ---> array theke akta akta kore noton document toiri koreche
    },
])

db.practice.aggregate([
    // unwind stage
    {
        $unwind: "$education"
    },
    {
        $group: { _id: "$education"} -->unwind korar por group education er vitti te documents gola group kora hoyeche unique vabe.
    }
])


$project diye document k amra reshape korte pari or modify korete pari, like name change etc

*$facet, aita diye subpipeline banai

db.practice.aggregate([
    {$match: {_id:ObjectId("6406ad65fc13ae5a400000c5")}},
    
    {//multistage pipeline

        $facet: {
            //  sub pipeline 
            "friendsCount": [
                // stage
                { $project: { friendsCount: { $size: "$friends" } } }
            ],
            // sub pipeline
            "interestsCount": [
                { $project: { interestsCount: { $size: "$interests" } } }
            ],
            // sub pipeline
            skillsCount: [
                { $project: { skillsCount: { $size: "$skills" } } }
            ]
        }

    }
])


*$lookup, its compare and modification between two collection

db.practice.aggregate([
    {$match: {email:"dhourstan2p@examiner.com"}},
    {$lookup: {
           from: "<collection to join>",
           localField: "<field from the input documents>",
           foreignField: "<field from the documents of the from collection>",
           as: "<output array field>"
         }}
])

db.practice.aggregate([
    {$match: {email:"dhourstan2p@examiner.com"}},
    {$lookup: {
           from: "additionalInfo",
           localField: "email",
           foreignField: "userEmail",
           as: "additionalInformation"
         }}
])

db.additionalInfo.updateOne({_id:ObjectId("646a19e18626685778331e6b")},{$set:{userId: new ObjectId("6406ad65fc13ae5a400000c5")}})


